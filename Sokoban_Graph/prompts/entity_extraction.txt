
-Goal-
Given a text document that is potentially relevant to this activity and a list of entity types, identify all entities of those types from the text and all relationships among the identified entities.

-Steps-
1. Identify all entities. For each identified entity, extract the following information:
- entity_name: Name of the entity, capitalized
- entity_type: One of the following types: [action, object, location, predicate, goal, domain, problem]
- entity_description: Comprehensive description of the entity's attributes and activities
Format each entity as ("entity"{tuple_delimiter}<entity_name>{tuple_delimiter}<entity_type>{tuple_delimiter}<entity_description>)

2. From the entities identified in step 1, identify all pairs of (source_entity, target_entity) that are *clearly related* to each other.
For each pair of related entities, extract the following information:
- source_entity: name of the source entity, as identified in step 1
- target_entity: name of the target entity, as identified in step 1
- relationship_description: explanation as to why you think the source entity and the target entity are related to each other
- relationship_strength: an integer score between 1 to 10, indicating strength of the relationship between the source entity and target entity
Format each relationship as ("relationship"{tuple_delimiter}<source_entity>{tuple_delimiter}<target_entity>{tuple_delimiter}<relationship_description>{tuple_delimiter}<relationship_strength>)

3. Return output in The primary language of the provided text is "English". as a single list of all the entities and relationships identified in steps 1 and 2. Use **{record_delimiter}** as the list delimiter.

4. If you have to translate into The primary language of the provided text is "English"., just translate the descriptions, nothing else!

5. When finished, output {completion_delimiter}.

-Examples-
######################

Example 1:

entity_types: [action, object, location, predicate, goal, domain, problem]
text:
(:action moveUp
		:parameters (?sokoban ?x ?y)
		:precondition (and (sokoban ?sokoban)
						  (at ?sokoban ?x)
						  (below ?x ?y)      					;location x is below location y
						  (clear ?y))        					;and y is clear, so move up to y
		:effect (and (at ?sokoban ?y) (clear ?x)
				(not (at ?sokoban ?x)) (not (clear ?y))))

	(:action moveDown
		:parameters (?sokoban ?x ?y)
		:precondition (and (sokoban ?sokoban)
						  (at ?sokoban ?x)
						  (below ?y ?x)      					;location y is below location x
						  (clear ?
------------------------
output:
("entity"{tuple_delimiter}MOVEUP{tuple_delimiter}ACTION{tuple_delimiter}The action 'moveUp' allows the sokoban to move from one location to another, specifically from a lower location to a higher one, given certain conditions are met.)
{record_delimiter}
("entity"{tuple_delimiter}MOVEDOWN{tuple_delimiter}ACTION{tuple_delimiter}The action 'moveDown' allows the sokoban to move from a higher location to a lower one, contingent on specific preconditions.)
{record_delimiter}
("entity"{tuple_delimiter}SOKOBAN{tuple_delimiter}OBJECT{tuple_delimiter}The sokoban is an object that can be moved within the game environment, requiring specific conditions to be met for movement.)
{record_delimiter}
("entity"{tuple_delimiter}LOCATION{tuple_delimiter}LOCATION{tuple_delimiter}Locations are defined points in the game environment where the sokoban can be positioned, such as 'x' and 'y' in the context of the actions.)
{record_delimiter}
("entity"{tuple_delimiter}PRECONDITION{tuple_delimiter}PREDICATE{tuple_delimiter}Preconditions are conditions that must be satisfied for an action to be executed, such as the sokoban being at a specific location and the target location being clear.)
{record_delimiter}
("entity"{tuple_delimiter}EFFECT{tuple_delimiter}PREDICATE{tuple_delimiter}Effects are the outcomes of executing an action, which include changes in the sokoban's position and the state of the locations involved.)
{record_delimiter}
("relationship"{tuple_delimiter}MOVEUP{tuple_delimiter}SOKOBAN{tuple_delimiter}The action 'moveUp' involves the sokoban as the object being moved to a new location.{tuple_delimiter}8)
{record_delimiter}
("relationship"{tuple_delimiter}MOVEUP{tuple_delimiter}LOCATION{tuple_delimiter}The action 'moveUp' requires specific locations to be defined for the sokoban's movement.{tuple_delimiter}7)
{record_delimiter}
("relationship"{tuple_delimiter}MOVEUP{tuple_delimiter}PRECONDITION{tuple_delimiter}The action 'moveUp' has preconditions that must be satisfied for it to be executed successfully.{tuple_delimiter}9)
{record_delimiter}
("relationship"{tuple_delimiter}MOVEUP{tuple_delimiter}EFFECT{tuple_delimiter}The action 'moveUp' results in specific effects that change the state of the sokoban and the locations involved.{tuple_delimiter}9)
{record_delimiter}
("relationship"{tuple_delimiter}MOVEDOWN{tuple_delimiter}SOKOBAN{tuple_delimiter}The action 'moveDown' involves the sokoban as the object being moved to a new location.{tuple_delimiter}8)
{record_delimiter}
("relationship"{tuple_delimiter}MOVEDOWN{tuple_delimiter}LOCATION{tuple_delimiter}The action 'moveDown' requires specific locations to be defined for the sokoban's movement.{tuple_delimiter}7)
{record_delimiter}
("relationship"{tuple_delimiter}MOVEDOWN{tuple_delimiter}PRECONDITION{tuple_delimiter}The action 'moveDown' has preconditions that must be satisfied for it to be executed successfully.{tuple_delimiter}9)
{record_delimiter}
("relationship"{tuple_delimiter}MOVEDOWN{tuple_delimiter}EFFECT{tuple_delimiter}The action 'moveDown' results in specific effects that change the state of the sokoban and the locations involved.{tuple_delimiter}9)
{completion_delimiter}
#############################


Example 2:

entity_types: [action, object, location, predicate, goal, domain, problem]
text:
	;and location z is clear, so push crate left to z
		:effect (and (at ?sokoban ?y) (at ?crate ?z) 
				(clear ?x) 
				(not (at ?sokoban ?x)) 
				(not (at ?crate ?y)) 
				(not (clear ?z)) 
				(not (clear ?y))))
			   
	(:action pushRight
		:parameters (?sokoban ?x ?y ?z ?crate)
		:precondition (and (sokoban ?sokoban)
							(crate ?crate)
							(leftOf ?x ?y)						;x is left of y
							(leftOf ?y ?z)						;y is left of z
							(at ?sokoban ?x)					;sokoban is at x
							(at ?crate ?
------------------------
output:
("entity"{tuple_delimiter}PUSH CRATE LEFT TO Z{tuple_delimiter}ACTION{tuple_delimiter}The action of moving a crate to the left towards location z, indicating a spatial manipulation in a game environment)
{record_delimiter}
("entity"{tuple_delimiter}Z{tuple_delimiter}LOCATION{tuple_delimiter}Location z is a target position where the crate is to be pushed)
{record_delimiter}
("entity"{tuple_delimiter}SOKOBAN{tuple_delimiter}OBJECT{tuple_delimiter}The sokoban is an object that represents the player or character in the game, responsible for pushing crates)
{record_delimiter}
("entity"{tuple_delimiter}CRATE{tuple_delimiter}OBJECT{tuple_delimiter}The crate is an object that the sokoban can push around the game environment)
{record_delimiter}
("entity"{tuple_delimiter}Y{tuple_delimiter}LOCATION{tuple_delimiter}Location y is a position in the game where the crate is initially located before being pushed)
{record_delimiter}
("entity"{tuple_delimiter}X{tuple_delimiter}LOCATION{tuple_delimiter}Location x is a position in the game that is left of location y, where the sokoban is currently located)
{record_delimiter}
("relationship"{tuple_delimiter}SOKOBAN{tuple_delimiter}CRATE{tuple_delimiter}The sokoban is the character that interacts with and pushes the crate in the game environment{tuple_delimiter}9)
{record_delimiter}
("relationship"{tuple_delimiter}CRATE{tuple_delimiter}Z{tuple_delimiter}The crate is being pushed to location z, indicating a direct action towards that location{tuple_delimiter}8)
{record_delimiter}
("relationship"{tuple_delimiter}X{tuple_delimiter}Y{tuple_delimiter}Location x is positioned to the left of location y, establishing a spatial relationship between the two locations{tuple_delimiter}7)
{record_delimiter}
("relationship"{tuple_delimiter}Y{tuple_delimiter}Z{tuple_delimiter}Location y is positioned to the left of location z, establishing a spatial relationship between the two locations{tuple_delimiter}7)
{record_delimiter}
("relationship"{tuple_delimiter}SOKOBAN{tuple_delimiter}X{tuple_delimiter}The sokoban is currently located at position x, indicating its starting point before pushing the crate{tuple_delimiter}8)
{completion_delimiter}
#############################



-Real Data-
######################
entity_types: [action, object, location, predicate, goal, domain, problem]
text: {input_text}
######################
output: